<?xml version='1.0' encoding='utf-8'?>
<namespace id="Brickware::Utility" name="Utility" xmlns="http://jessevdk.github.com/cldoc/1.0">
  <class name="JSONObject" ref="Brickware::Utility::JSONObject#Brickware::Utility::JSONObject">
    <brief> A class that represents an object in JSON</brief>
  </class>
  <class name="JSONPair" ref="Brickware::Utility::JSONPair#Brickware::Utility::JSONPair">
    <brief> A class that represents a basic key value pair in JSON</brief>
  </class>
  <class name="JSONParser" ref="Brickware::Utility::JSONParser#Brickware::Utility::JSONParser">
    <brief>The static class that has the methods to decode and encode JSON</brief>
  </class>
  <union id="Brickware::Utility::JSONValue" name="JSONValue">
    <brief> A union of types that represents a possible value in JSON</brief>
    <doc>This union solves the problem of
 "How do we store data in a template if we don't know its type"
 without using a void* and the possiblity of the user causing a crash
 when retrieving data.
</doc>
    <field id="Brickware::Utility::JSONValue::string" name="string">
      <type builtin="yes" name="char" qualifier="*" />
    </field>
    <field id="Brickware::Utility::JSONValue::integer" name="integer">
      <type builtin="yes" name="int" />
    </field>
    <field id="Brickware::Utility::JSONValue::floatingPoint" name="floatingPoint">
      <type builtin="yes" name="float" />
    </field>
    <field id="Brickware::Utility::JSONValue::boolean" name="boolean">
      <type builtin="yes" name="bool" />
    </field>
    <field id="Brickware::Utility::JSONValue::object" name="object">
      <type name="JSONObject" qualifier="*" ref="Brickware::Utility::JSONObject#Brickware::Utility::JSONObject" />
    </field>
    <field id="Brickware::Utility::JSONValue::array" name="array">
      <type name="std::vector&lt;Brickware::Utility::JSONValue, std::allocator&lt;Brickware::Utility::JSONValue&gt; &gt;" qualifier="*" />
    </field>
    <conversionfunction id="Brickware::Utility::JSONValue::operator bool" name="operator bool">
      <return>
        <type builtin="yes" name="bool" />
      </return>
    </conversionfunction>
    <conversionfunction id="Brickware::Utility::JSONValue::operator Brickware::Utility::JSONObject *" name="operator Brickware::Utility::JSONObject *">
      <return>
        <type name="JSONObject" qualifier="*" ref="Brickware::Utility::JSONObject#Brickware::Utility::JSONObject" />
      </return>
    </conversionfunction>
    <conversionfunction id="Brickware::Utility::JSONValue::operator char *" name="operator char *">
      <return>
        <type builtin="yes" name="char" qualifier="*" />
      </return>
    </conversionfunction>
    <conversionfunction id="Brickware::Utility::JSONValue::operator float" name="operator float">
      <return>
        <type builtin="yes" name="float" />
      </return>
    </conversionfunction>
    <conversionfunction id="Brickware::Utility::JSONValue::operator int" name="operator int">
      <return>
        <type builtin="yes" name="int" />
      </return>
    </conversionfunction>
    <conversionfunction id="Brickware::Utility::JSONValue::operator std::vector&lt;Brickware::Utility::JSONValue, std::allocator&lt;Brickware::Utility::JSONValue&gt; &gt; *" name="operator std::vector&lt;Brickware::Utility::JSONValue, std::allocator&lt;Brickware::Utility::JSONValue&gt; &gt; *">
      <return>
        <type name="std::vector&lt;Brickware::Utility::JSONValue, std::allocator&lt;Brickware::Utility::JSONValue&gt; &gt;" qualifier="*" />
      </return>
    </conversionfunction>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::s" name="s">
        <type builtin="yes" name="char" qualifier="*" />
      </argument>
    </method>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::i" name="i">
        <type builtin="yes" name="int" />
      </argument>
    </method>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::f" name="f">
        <type builtin="yes" name="float" />
      </argument>
    </method>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::b" name="b">
        <type builtin="yes" name="bool" />
      </argument>
    </method>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::o" name="o">
        <type name="JSONObject" qualifier="*" ref="Brickware::Utility::JSONObject#Brickware::Utility::JSONObject" />
      </argument>
    </method>
    <method id="Brickware::Utility::JSONValue::operator=" name="operator=">
      <return>
        <type name="JSONValue" ref="Brickware::Utility#Brickware::Utility::JSONValue" />
      </return>
      <argument id="Brickware::Utility::JSONValue::operator=::a" name="a">
        <type name="std::vector&lt;Brickware::Utility::JSONValue, std::allocator&lt;Brickware::Utility::JSONValue&gt; &gt;" qualifier="*" />
      </argument>
    </method>
  </union>
</namespace>
